{"version":3,"file":"component---src-pages-components-loadingspinner-tsx-3f4fe99dd344bdcb4b93.js","mappings":"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","sources":["webpack://suomifi-design-system/./src/components/NoteBox.tsx","webpack://suomifi-design-system/./src/pages/components/loadingspinner.tsx"],"sourcesContent":["import React from 'react';\nimport { defaultSuomifiTheme } from 'suomifi-ui-components';\n\nimport { Heading, Text } from 'components/ResponsiveComponents';\n\nconst NoteBox = ({ title, items }: Props): JSX.Element => (\n  <section\n    style={{\n      background: defaultSuomifiTheme.colors.highlightLight3,\n      margin: `${defaultSuomifiTheme.spacing.xl} 0`,\n      padding: defaultSuomifiTheme.spacing.m,\n      border: `1px solid ${defaultSuomifiTheme.colors.depthLight1}`,\n    }}\n  >\n    <Heading variant=\"h3\" as=\"h2\">\n      {title}\n    </Heading>\n    <ul\n      style={{ margin: 0, padding: `0 0 0 ${defaultSuomifiTheme.spacing.s}` }}\n    >\n      {items.map(\n        (item, index) =>\n          !!item && (\n            <li key={index} style={{ margin: defaultSuomifiTheme.spacing.m }}>\n              <Text>{item}</Text>\n            </li>\n          ),\n      )}\n    </ul>\n  </section>\n);\n\ninterface Props {\n  title: string;\n  items: string[];\n}\n\nexport default NoteBox;\n","import React, { useState } from 'react';\nimport {\n  defaultSuomifiTheme,\n  LoadingSpinnerProps,\n  LoadingSpinnerStatus,\n} from 'suomifi-ui-components';\n\nimport content from '../../../locale/fi/loadingspinner.json';\nimport Layout from 'components/layout';\nimport SEO from 'components/seo';\nimport sideNavData from 'config/sidenav/components';\nimport NoteBox from 'components/NoteBox';\nimport {\n  Notification,\n  Link,\n  LoadingSpinner,\n  Button,\n} from 'components/ExampleComponents';\nimport { Heading, Text, Paragraph } from 'components/ResponsiveComponents';\nimport Section from 'components/Section';\nimport ComponentDescription from 'components/ComponentDescription';\nimport ComponentExample from 'components/ComponentExample';\nimport { Example } from 'examples/components';\n\nconst Page = (): JSX.Element => (\n  <Layout sideNavData={sideNavData}>\n    <SEO title={content.title} />\n    <Heading variant=\"h1\">{content.title}</Heading>\n\n    <Paragraph variant=\"lead\">\n      <Text variant=\"lead\">{content.intro}</Text>\n    </Paragraph>\n    <ComponentDescription>\n      <ComponentExample style={{ marginBottom: defaultSuomifiTheme.spacing.s }}>\n        <LoadingSpinner\n          status=\"loading\"\n          variant=\"normal\"\n          textAlign=\"right\"\n          text=\"Loading\"\n        />\n      </ComponentExample>\n    </ComponentDescription>\n\n    <NoteBox title={content['note.title']} items={content['note.items']} />\n\n    {content.sections.map((section, index) => (\n      <Section\n        key={index}\n        mainTitle={section.title}\n        paragraphs={section.paragraphs}\n        links={section.links}\n      />\n    ))}\n\n    <BasicExample\n      title={content['example.basic.heading']}\n      desc={content['example.basic.description']}\n      noCode={true}\n    />\n\n    <SuccessExample\n      title={content['example.success.heading']}\n      desc={content['example.success.description']}\n      noCode={true}\n    />\n\n    <FailingExample\n      title={content['example.error.heading']}\n      desc={content['example.error.description']}\n      noCode={true}\n    />\n  </Layout>\n);\n\nconst BasicExample = ({\n  title,\n  desc,\n  noCode,\n  ...passProps\n}: Partial<LoadingSpinnerProps> & {\n  title: string;\n  desc: string;\n  noCode: boolean;\n}): JSX.Element => {\n  const [visible, setVisible] = useState(false);\n  const [loaded, setLoaded] = useState(0);\n  const [status, setStatus] = useState<LoadingSpinnerStatus>('loading');\n\n  const runLoader = (): void => {\n    let progress = 0;\n    const id = setInterval(frame, 300);\n    function frame(): void {\n      if (progress >= 100) {\n        clearInterval(id);\n        setVisible(false);\n        progress = 0;\n      } else {\n        progress = progress + 10;\n      }\n      setLoaded(progress);\n    }\n  };\n\n  return (\n    <ComponentDescription mainTitle={title} description={desc} noCode={noCode}>\n      <ComponentExample\n        style={{\n          marginBottom: defaultSuomifiTheme.spacing.s,\n          display: 'flex',\n          flexDirection: 'column',\n        }}\n      >\n        <Button\n          disabled={visible}\n          onClick={() => {\n            setStatus('loading');\n\n            if (!visible) {\n              runLoader();\n            }\n            setVisible(!visible);\n          }}\n        >\n          {content['example.startButton']}\n        </Button>\n\n        <div\n          aria-live=\"assertive\"\n          aria-busy={status === 'loading'}\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            width: '100%',\n            height: '100px',\n            marginTop: defaultSuomifiTheme.spacing.m,\n            border: `1px solid ${defaultSuomifiTheme.colors.depthLight1}`,\n          }}\n        >\n          {visible && (\n            <LoadingSpinner\n              status={status}\n              text={\n                status !== 'success'\n                  ? content['example.loading.active']\n                  : content['example.loading.success']\n              }\n            />\n          )}\n        </div>\n      </ComponentExample>\n    </ComponentDescription>\n  );\n};\n\nconst SuccessExample = ({\n  title,\n  desc,\n  noCode,\n  ...passProps\n}: Partial<LoadingSpinnerProps> & {\n  title: string;\n  desc: string;\n  noCode: boolean;\n}): JSX.Element => {\n  const [visible, setVisible] = useState(false);\n  const [loaded, setLoaded] = useState(0);\n  const [status, setStatus] = useState<LoadingSpinnerStatus>('failed');\n\n  const runLoader = (): void => {\n    let progress = 0;\n    const id = setInterval(frame, 300);\n    function frame(): void {\n      if (progress >= 100) {\n        clearInterval(id);\n        setStatus('success');\n        progress = 0;\n      } else {\n        progress = progress + 10;\n      }\n      setLoaded(progress);\n    }\n  };\n\n  return (\n    <ComponentDescription mainTitle={title} description={desc} noCode={noCode}>\n      <ComponentExample\n        style={{\n          marginBottom: defaultSuomifiTheme.spacing.s,\n          display: 'flex',\n          flexDirection: 'column',\n        }}\n      >\n        <Button\n          disabled={status === 'loading'}\n          onClick={() => {\n            if (!visible) {\n              setStatus('loading');\n              runLoader();\n            } else {\n              setStatus('failed');\n            }\n            setVisible(!visible);\n          }}\n        >\n          {status === 'success'\n            ? content['example.closeButton']\n            : content['example.startButton']}\n        </Button>\n\n        <div\n          aria-live=\"assertive\"\n          aria-busy={status === 'loading'}\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            width: '100%',\n            height: '100px',\n            marginTop: defaultSuomifiTheme.spacing.m,\n            border: `1px solid ${defaultSuomifiTheme.colors.depthLight1}`,\n          }}\n        >\n          {visible && (\n            <LoadingSpinner\n              status={status}\n              text={\n                status !== 'success'\n                  ? content['example.loading.active']\n                  : content['example.loading.success']\n              }\n            />\n          )}\n        </div>\n      </ComponentExample>\n    </ComponentDescription>\n  );\n};\n\nconst FailingExample = ({\n  title,\n  desc,\n  noCode,\n  ...passProps\n}: Partial<LoadingSpinnerProps> & {\n  title: string;\n  desc: string;\n  noCode: boolean;\n}): JSX.Element => {\n  const [visible, setVisible] = useState(false);\n  const [loaded, setLoaded] = useState(0);\n  const [status, setStatus] = useState<LoadingSpinnerStatus>('success');\n\n  const runLoader = (): void => {\n    let progress = 0;\n    const id = setInterval(frame, 300);\n    function frame(): void {\n      if (progress >= 100) {\n        clearInterval(id);\n        setStatus('failed');\n        progress = 0;\n      } else {\n        progress = progress + 10;\n      }\n      setLoaded(progress);\n    }\n  };\n\n  return (\n    <ComponentDescription mainTitle={title} description={desc} noCode={noCode}>\n      <ComponentExample\n        style={{\n          marginBottom: defaultSuomifiTheme.spacing.s,\n          display: 'flex',\n          flexDirection: 'column',\n        }}\n      >\n        <Button\n          disabled={status === 'loading'}\n          onClick={() => {\n            if (!visible) {\n              setStatus('loading');\n              runLoader();\n            } else {\n              setStatus('success');\n            }\n            setVisible(!visible);\n          }}\n        >\n          {status === 'failed'\n            ? content['example.closeButton']\n            : content['example.startButton']}\n        </Button>\n\n        <div\n          aria-live=\"assertive\"\n          aria-busy={status === 'loading'}\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            width: '100%',\n            height: '100px',\n            marginTop: defaultSuomifiTheme.spacing.m,\n            border: `1px solid ${defaultSuomifiTheme.colors.depthLight1}`,\n          }}\n        >\n          {visible && (\n            <LoadingSpinner\n              status={status}\n              text={\n                status !== 'failed'\n                  ? content['example.loading.active']\n                  : content['example.loading.error']\n              }\n            />\n          )}\n        </div>\n      </ComponentExample>\n    </ComponentDescription>\n  );\n};\n\nexport default Page;\n"],"names":["title","items","style","background","defaultSuomifiTheme","margin","padding","border","variant","as","map","item","index","key","BasicExample","desc","noCode","useState","visible","setVisible","setLoaded","status","setStatus","mainTitle","description","marginBottom","display","flexDirection","disabled","onClick","progress","id","setInterval","clearInterval","content","alignItems","justifyContent","width","height","marginTop","text","SuccessExample","FailingExample","sideNavData","textAlign","section","paragraphs","links"],"sourceRoot":""}